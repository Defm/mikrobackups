:local sysname [/system identity get name];
:local scriptname "doCreateTrafficAccountingQueues";
:global globalScriptBeforeRun;
$globalScriptBeforeRun $scriptname;

#a part of queue comment to locate queues to be processed
:local qCommentMark "dtq";

:global globalNoteMe;
:local itsOk true;

:local state "";
 
/ip dhcp-server lease
:foreach x in=[find] do={
   
  # grab variables for use below
  :local dhcpIp ([get $x address])
  :local dhcpMac [get $x mac-address]
  :local dhcpHost [get $x host-name]
  :local dhcpComment [get $x comment]
  :local dhcpServer [get $x server]
  :local qComment ""
   
  :local leaseinqueue false

  /queue simple
  :foreach y in=[find where comment~"$qCommentMark"] do={
     
    #grab variables for use below
    :local qIp [get $y target]
    :set qComment [get $y comment]

    :local skip false;
  
    :if ( ($qIp->0) != nil ) do={
      :set qIp ($qIp->0) 
      :set qIp ( [:pick $qIp 0 [:find $qIp "/" -1]] ) ;
    } else {
      :set skip true;
    }
         
    # Isolate information  from the comment field (MAC, Hostname)
    :local qMac [:pick $qComment 4 21]
    :local qHost [:pick $qComment 22 [:len $qComment]]

    # If MAC from lease matches the queue MAC and IPs are the same - then refresh the queue item
    :if ($qMac = $dhcpMac and $qIp = $dhcpIp and !$skip) do={

      # build a comment field
      :set qComment ($qCommentMark . "," . $dhcpMac . "," . $dhcpHost)

      set $y target=$dhcpIp comment=$qComment

      :if ($dhcpComment != "") do= {
        set $y name=($dhcpComment . "@" . $dhcpServer . " (" . $dhcpMac . ")")
      } else= {
        :if ($dhcpHost != "") do= {
          set $y name=($dhcpHost . "@" . $dhcpServer . " (" . $dhcpMac . ")")
        } else= {
          set $y name=($dhcpMac . "@" . $dhcpServer)
        }
      }

      :local queuename [get $y name]

      :set state "Queue $queuename updated"
      $globalNoteMe value=$state;

      :set leaseinqueue true
    } 
  }

  # There was not an existing entry so add one for this lease
  :if ($leaseinqueue = false) do={

    # build a comment field
    :set qComment ($qCommentMark . "," . $dhcpMac . "," . $dhcpHost)

    # build command (queue names should be unique)
    :local cmd "/queue simple add target=$dhcpIp max-limit=10M/10M comment=$qComment"
    :if ($dhcpComment != "") do={ 
      :set cmd "$cmd name=\"$dhcpComment@$dhcpServer ($dhcpMac)\"" 
    } else= {
      :if ($dhcpHost != "") do={
        :set cmd "$cmd name=\"$dhcpHost@$dhcpServer ($dhcpMac)\""
      } else= {
        :set cmd "$cmd name=\"$dhcpMac@$dhcpServer\""
      }
    }

    :execute $cmd

    :set state "Queue $qComment created"
    $globalNoteMe value=$state;

  }
}

# Cleanup Routine - remove dynamic entries that no longer exist in the lease table
/queue simple
:foreach z in=[find where comment~"$qCommentMark"] do={

  :local qComment [get $z comment]
  :local qMac [:pick $qComment 4 21]

  :local qIp [get $z target]
  :local skip false

  :if ( ($qIp->0) != nil ) do={
    :set qIp ($qIp->0) 
    :set qIp ( [:pick $qIp 0 [:find $qIp "/" -1]] ) ;
  } else {
    :set skip true;
  }

  :if ($itsOk and !$skip) do={
    :if ( [/ip dhcp-server lease find address=$qIp and mac-address=$qMac] = "") do={
      :set state "Queue $qComment dropped as stale"
      $globalNoteMe value=$state;
      remove $z
    }
  }    
}

:local inf ""
:if ($itsOk) do={
  :set inf "$scriptname on $sysname: refreshed traffic accounting queues Succesfully"
}

:if (!$itsOk) do={
  :set inf "Error When $scriptname on $sysname: $state"  
}

$globalNoteMe value=$inf

:global globalTgMessage;
$globalTgMessage value=$inf;
