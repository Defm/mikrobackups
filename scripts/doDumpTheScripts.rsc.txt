
#directories have to exist!
:local FTPRoot "/pub/git/"

#This subdir will be created locally to put exported scripts in
#and it must exist under $FTPRoot to upload scripts to
:local SubDir "scripts/"

:local FTPEnable true
:local FTPServer "minialx.home"
:local FTPPort 21
:local FTPUser "ftp"
:local FTPPass ""

:local DebugInfo do={

 :put "DEBUG: $value"
 :log info message="$value"

}

:global GscriptId;

:local continue true;

:do {
  :local smtpserv [:resolve "$FTPServer"];
} on-error={
   $DebugInfo value="FTP server looks like to be unreachable";
  :local continue false;    
}

:if ($continue) do={
  :do {
    [/tool fetch dst-path="$SubDir.FooFile" url="http://127.0.0.1:80/mikrotik_logo.png" keep-result=no];
  } on-error={ 
    $DebugInfo value="Error When Creating Local Scripts Directory";
    :local continue false;
  }
}

:if ($continue) do={
  :foreach scriptId in [/system script find] do={

    :local scriptSource [/system script get $scriptId source];
    :local scriptName [/system script get $scriptId name];
    :local scriptSourceLength [:len $scriptSource];
    :local path "$SubDir$scriptName.rsc.txt";

    :set $GscriptId $scriptId;

    :if ($scriptSourceLength >= 4096) do={
      :local state "Please keep care about '$scriptName' consistency - its size over 4096 bytes";
      $DebugInfo value=$state;
    }


    :do {
      /file print file=$path where 1=0;
      #filesystem delay
      :delay 1s;
      #/file set [find name="$path"] contents=$scriptSource;
      #/file set $path contents=$scriptSource;
      # Due to max variable size 4096 bytes - this scripts should be reworked, but now using :put hack
      /execute script=":global GscriptId; :put [/system script get $GscriptId source];" file=$path;
      :local state "Exported '$scriptName' to '$path'";
      $DebugInfo value=$state;
    } on-error={ 
      :local state "Error When Exporting '$scriptName' Script to '$path'";
      $DebugInfo value=$state;
      :local continue false;
    }

  }
}


:delay 5s

:local backupFileName ""

:if ($continue) do={
  :foreach backupFile in=[/file find where name~"^$SubDir"] do={
    :set backupFileName ([/file get $backupFile name]);
    :if ([:typeof [:find $backupFileName ".rsc.txt"]] != "nil") do={
      :local rawfile ( $backupFileName ~".rsc.txt");
      #special ftp upload for git purposes
      if ($FTPEnable) do={
        :local dst "$FTPRoot$backupFileName";
        :do {
          :local state "Uploading $backupFileName' to '$dst'";
          $DebugInfo value=$state;
          /tool fetch address=$FTPServer port=$FTPPort src-path=$backupFileName user=$FTPUser password=$FTPPass dst-path=$dst mode=ftp upload=yes;
          $DebugInfo value="Done";
        } on-error={ 
          :local state "Error When Uploading '$backupFileName' to '$dst'";
          $DebugInfo value=$state; 
        }
      }
    }
  }
}

:delay 5s

:foreach backupFile in=[/file find where name~"^$SubDir"] do={
  :if ([:typeof [:find $backupFileName ".rsc.txt"]] != "nil") do={
    /file remove $backupFile;
  }
}

$DebugInfo value="Successfully removed Temporary Script Files";
$DebugInfo value="Automatic Script Export Completed";

#urlencoded cyrillic
:local backupDone "%D0%92%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%BE%20%D1%80%D0%B5%D0%B7%D0%B5%D1%80%D0%B2%D0%BD%D0%BE%D0%B5%20%D0%B0%D1%80%D1%85%D0%B8%D0%B2%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D0%B8%20%D0%BC%D0%B0%D1%80%D1%88%D1%80%D1%83%D1%82%D0%B8%D0%B7%D0%B0%D1%82%D0%BE%D1%80%D0%B0%20%28%D1%81%D0%BC.%20%D0%BF%D0%BE%D1%87%D1%82%D1%83%29";
:global TelegramMessage "$backupDone";

/system script run doTelegramNotify;




