#------------------------------------------------------------------------------------------------------------------------
# SATELLITE1 module  for TLGRM version 1.8 by Sertik (Serkov S.V.) 24/04/2022
#------------------------------------------------------------------------------------------------------------------------

# declare functions:

:global FuncSATLogo
:global FuncSATList
:global FuncArp
:global FuncAddress
:global FuncBackup
:global FuncLease
:global FuncReport 
:global FuncStatus
:global FuncVPN 
:global FuncVpnUser 
:global FuncWifi 
:global FuncWifiReg 
:global FuncWifiAccess
:global FuncWifiPass
:global FuncScriptList
:global FuncFuncList
:global FuncSchedList
:global FuncGlobalVarList


# выдача логотипа библиотеки в лог
#              FuncSATlogo
# ---------------------------------------------------------

:set FuncSATLogo do={
:if ([:len $0]!=0) do={
:log warning "";
:log warning "#------------------------------------------------------------------------#";
:log warning "#                 Library SATELLITE for TLGRM" ;
:log warning "#   Библиотека СПУТНИК для скрипта TLGRM";
:log warning "#       by Serkov S.V. (Sertik) update 24/04/2022";
:log warning "#                                 version 1.8"; 
:log warning "#------------------------------------------------------------------------#";
:log warning "";
 }
:return []}


# печать списка команд-функций библиотеки
#                FuncSATList в чат Телеграмм
# -----------------------------------------------------------------------

:set FuncSATList do={
:if ([:len $0]!=0) do={
:global Emoji
:global FuncTelegramSender

# send list function SATELITE to Telegram
if ([:len $1]=0) do={
:local arrayCom [:toarray {"/FuncArp"="список arp";
                                        "/FuncAddress"="список /ip addresses";
                                        "/FuncBackup"="резервное копирование конфигурации роутера";
                                         "/FuncLease"="список DHCP liase";
                                         "/FuncReport"="отчет статуса роутера";
                                         "/FuncStatus"="параметры системы";
                                         "/FuncVpnUser"="настроенные VPN-пользователи с паролями";
                                         "/FuncVPN"="серверы и клиенты VPN роутера";
                                          "/FuncWifi"="wifi-интерфейсы роутера";
                                          "/FuncWifiReg"="зарегистрированные в сети wifi-пользователи";
                                          "/FuncWifiAccess"="разрешенные wifi-пользователи";
                                          "/FuncWifiConnect"="wifi-клиентские станции";
                                          "/FuncWifiPass"="пароли wifi-сети/ей";
                                          "/FuncHealth"="отчёт о здоровье роутера"
                                          "/FuncDHCPclient"="роутер-клиент DHCP";
                                          "/FuncUsers"="пользователи роутера и пароли";
                                           "/FuncScriptList"="список скриптов роутера с комметариями";
                                           "/FuncLog"="выдать строки лога в Телеграмм";
                                           "/FuncLogReset"="очистка лога";
                                           "/FuncPingPong"="проверка хоста на пинг";
                                           "/FuncMail"="функция отправки почты";
                                           "/FuncSMSsend"="отправка SMS через модем роутера";
                                           "/FuncModemInfo"="поиск и отчёт модемов роутера";
                                           "/FuncFuncList"="список активных функций в Environment"; 
                                           "/FuncSchedList"="список заданий Планировщика"; 
                                           "/FuncGlobalVarList"="глобальные переменные и их значения"}]
;
:local count 0
:local TXTmessage ""
:foreach k,v in=$arrayCom do={:set count ($count+1);
:local command
:global fMirror
:if ($fMirror) do={
:set command ("/"."$[:pick $k 5 [:len $k]]")
:set TXTmessage ("$TXTmessage        "."$count "."$command  -  $v". "%0A")} else={ 
:set TXTmessage ("$TXTmessage        "."$count "."$k  -  $v". "%0A")}}
[$FuncTelegramSender ("$Emoji ". "Router $[system identity get name]"."  function complex SATELITE available for execution:"."%0A"."$TXTmessage")]
:return $count }

# send list special function to Telegram
:if ($1="special") do={
:local arraySpecial [:toarray {"/FuncTelegramSender"="отправка сообщений в Telegram";
                                                        "/FuncSchedFuncAdd"="добавление функции-задания в Планировщик";
                                                        "/FuncSchedScriptAdd"="добавление скрипта-задания в Планировщик";
                                                        "/FuncSchedRemove"="удаление задания из Планировщика";
                                                        "/FuncEpochTime"="преобразование времени в Юлианское";
                                                        "/FuncUnixTimeToFormat"="преобразование Unix-времени в привычный формат";
                                                        "/FuncSATClear"="выгрузить библиотеку SATELLITE"}]
;
:local count1 0
:local TXTmessage1 ""

:foreach k,v in=$arraySpecial do={:set count1 ($count1+1);
:local command1 
:set TXTmessage1 ("$TXTmessage1        "."$count1 "."$k -  $v". "%0A")}
[$FuncTelegramSender ("$Emoji ". "Router $[system identity get name]"."  special function complex SATELITE:"."%0A"."$TXTmessage1")]
:return $count1}

  }
}


#
#   КОМАНДЫ БИБЛИОТЕКИ SATELLITE
#

# arp tabl - > Telegram
# ----------------------------------
:set FuncArp do={
:if ([:len $0]!=0) do={
:local TXTarp
:global Emoji
:global FuncTelegramSender
:local count 0
:local WS
:local TT
foreach i in=[ /ip arp find] do={
:local active [/ip arp get $i disabled]
:if ($active) do={:set WS "enable"; :set TT "%F0%9F%94%B4"} else={:set WS "disable"; :set TT "%F0%9F%94%B5"}
:local ipARPaddress [/ip arp get $i address];
:local ipARPmacaddress [/ip arp get $i mac];
:local ARPface [/ip arp get $i interface];
:local ARPcomment [/ip arp get $i comment];
:if ([:len $ipARPmacaddress]!=0) do={:set count ($count+1); :set $TXTarp ("$TXTarp"."$count "."$TT "."$ipARPaddress "." $ipARPmacaddress "." $ARPface "." $ARPcomment"."%0A")
  }
}

[$FuncTelegramSender ("$Emoji "." $[/system identity get name]"." arp tabl:"."%0A"."$TXTarp")]
:return $count
 }
}

# ip addresses tabl - > Telegram
# ---------------------------------------------
:set FuncAddress do={
:if ([:len $0]!=0) do={
:global Emoji
:global FuncTelegramSender
:local system [/system identity get name]
:local WS
:local listAL
:local TT
:local count 0

:foreach AddrList in=[/ip address find true] do={
:local Aname [/ip address get $AddrList]
:local Aadr ($Aname->"address")
:local Acomment ($Aname->"comment")
:local Anetwork ($Aname->"network")
:local Aface ($Aname->"actual-interface")
:local WsState [/ip address get $AddrList disabled]
:if ($WsState) do={:set WS "enable"; :set TT "%F0%9F%94%B4"} else={:set WS "disable"; :set TT "%F0%9F%94%B5"}
:set count ($count+1)
:set listAL ("$listAL"."$count"." $TT"." $Aadr"." $Acomment"." $Anetwork"." $Aface"."%0A")
}

:if ([:len $listAL]!=0) do={
[$FuncTelegramSender ("$Emoji "." $system"." /ip address :%0A"."$listAL")]
   }
 :return $count
 }
}


# backup  - > Telegram
# ----------------------------------
:set FuncBackup do={
:if ([:len $0]!=0) do={
# send or no send on E-mail
:local mailsend false
:global ADMINMAIL;  
:local mailBox $ADMINMAIL;  

:log warning "Starting Backup Script...";
:local sysname [/system identity get name];
:local sysver [/system package get system version];
:log info "Flushing DNS cache...";
/ip dns cache flush;
:delay 2;
:log info "Deleting last Backups...";
:foreach i in=[/file find] do={:if (([:typeof [:find [/file get $i name] \
"$sysname-backup-"]]!="nil") or ([:typeof [:find [/file get $i name] \
"$sysname-script-"]]!="nil")) do={/file remove $i}};
:delay 2;
:local backupfile ("$sysname-backup-" . \
[:pick [/system clock get date] 7 11] . [:pick [/system \
clock get date] 0 3] . [:pick [/system clock get date] 4 6] . ".backup");
:log warning "Creating new Full Backup file...$backupfile";
/system backup save name=$backupfile;
:delay 5;
:local exportfile ("$sysname-backup-" . \
[:pick [/system clock get date] 7 11] . [:pick [/system \
clock get date] 0 3] . [:pick [/system clock get date] 4 6] . ".rsc");
:log warning "Creating new Setup Script file...$exportfile";
/export verbose file=$exportfile;
:delay 5;
:local scriptfile ("$sysname-script-" . \
[:pick [/system clock get date] 7 11] . [:pick [/system \
clock get date] 0 3] . [:pick [/system clock get date] 4 6] . ".rsc");
:log warning "Creating new file export all scripts ...$scriptfile";
/system script export file=$scriptfile;
:delay 2;
:log warning "All System Backups and export all Scripts created successfully.\nBackuping completed.";

if ($mailsend) do={
:log warning "Sending Setup Script file via E-mail...";
:local smtpserv [:resolve "smtp.mail.ru"];
:local Eaccount [/tool e-mail get user];
:local pass [/tool e-mail get password];
/tool e-mail send from="<$Eaccount>" to=$mailBox server=$smtpserv \
port=587 user=$Eaccount password=$pass start-tls=yes file=($backupfile, $exportfile, $scriptfile) \
subject=("$sysname Setup Script Backup (" . [/system clock get date] . \
")") body=("$sysname Setup Script file see in attachment.\nRouterOS \
version: $sysver\nTime and Date stamp: " . [/system clock get time] . " \
" . [/system clock get date]);
:log warning "Setup Script file e-mail send";
:delay 5;
  }
:return "backup is done"
 }
}

# lease tabl - > Telegram
# -----------------------------------
:set FuncLease do={
:if ([:len $0]!=0) do={
:local count 0
:local txt
/ip dhcp-server lease
:if [/ip dhcp-server lease find] do={
:foreach i in=[find] do={
  :set count ($count+1)
  :local add [get $i address]
  :local mac [get $i mac-address]
  :local host [get $i host]
  :local com [get $i comment]
  :local serv [get $i server]
  :local bond [get $i status]
  :local active [get $i disabled]
  :local TT; :local WS
:if ($active) do={:set WS "enable"; :set TT "%F0%9F%94%B4"} else={:set WS "disable"; :set TT "%F0%9F%94%B5"}
# :log warning ("$count  "."$host   "."$serv "."   $add  "."$com"."  $mac "." $bond")
:set txt ("$txt"."$count  "."$TT "."$com  "."$add  "."  $mac"."%0A%20%20%20%20"."host: $host "." server: $serv"."  status: $bond"."%0A")
} 
} else={:set txt "       empty"}
:global Emoji
:global FuncTelegramSender
[$FuncTelegramSender ("$Emoji "."$[/system identity get name]"." DHCP lease tabl:"."%0A"."$txt")]
 }
}

# report router`s to Telegram
# -----------------------------------------
:set FuncReport do={
:if ([:len $0]!=0) do={
:global ADMINMAIL
:global FuncMail
:global ADMINPHONE
:global FuncSMSsend

:global Emoji
:global FuncTelegramSender
:if (([:len $1]=0) or ($1="tlgrm")) do={
:do {
[$FuncTelegramSender ("$Emoji"." Router "."$[/system identity get name]"." ONLINE")]
} on-error={:return "ERROR tlgrm send"}
:return "tlgrm";}
:if ($1="mail") do={
:do {
[$FuncMail Email=$ADMINMAIL Mailtext=("Router "."$[/system identity get name]"." ONLINE")]
} on-error={:return "ERROR email send"}
:return $1}
:if ($1="sms") do={
:do {
[$FuncSMSsend ("Router "."$[/system identity get name]"." ONLINE") $ADMINPHONE]
# /system routerboard usb power-reset duration=2s;
} on-error={:return "ERROR sms send"}
:return $1}
:if ($1="all") do={
:do {
[$FuncTelegramSender ("$Emoji"." Router "."$[/system identity get name]"." ONLINE")]
[$FuncMail Email=$ADMINMAIL Mailtext=("Router "."$[/system identity get name]"." ONLINE")]
[$FuncSMSsend ("Router "."$[/system identity get name]"." ONLINE") $ADMINPHONE]
} on-error={:return "$0 all send"}
:return $1}
 }
}

# all resurces - > Telegram
# --------------------------------------
:set FuncStatus do={
  :if ([:len $0]!=0) do={
    :global Emoji;
    :global FuncTelegramSender
    :local systemName       [/system identity get name];
    :local uptime           [/system resource get uptime];
    :local FreeMemory       [/system resource get free-memory];
    :local TotalMemory      [/system resource get total-memory];
    :local cpu              [/system resource get cpu];
    :local cpuCount         [/system resource get cpu-count];
    :local cpuFrequency     [/system resource get cpu-frequency];
    :local cpuLoad          [/system resource get cpu-load];
    :local freeHdd          [/system resource get free-hdd-space];
    :local totalHdd         [/system resource get total-hdd-space];
    :local architectureName [/system resource get arch]
#  :local license          [/system license get level];
    :local boardName        [/system resource get board-name];
    :local version          [/system resource get version];

:local TXT ("$Emoji "."$systemName"." status:"."%0A"."Uptime: "."$uptime"."%0A"."Free Memory: "."$FreeMemory"." B"."%0A"."Total Memory: "."$TotalMemory"." B"."%0A"."CPU ". "$cpu"."%0A"."CPU Count: "."$cpuCount"."%0A"."CPU Frequency: "."$cpuFrequency"."MHz"."%0A"."CPU Load: "."$cpuLoad"."% "."%0A"."Free HDD Space "."$freeHdd"." B "."%0A"."Total HDD Space: "."$totalHdd"." B"."%0A"."Architecture: "."$architectureName "."%0A"."License Level: "."$license"."%0A"."Board Name:  "."$boardName"." %0A"."Version: ". "$version")
:do {
[$FuncTelegramSender $TXT]
} on-error={}
:return [];
 }
}


# function VPN-tonnel scanning & Telegram chat send
# used: [$FuncTonnel "tonnelType"]
# for example: [$FuncTonnel "pptp-client"]

:set FuncVPN do={
:if ([:len $0]!=0) do={
:local FuncTonnel do={
:if ([:len $0]!=0) do={
:global Emoji
:global FuncTelegramSender
:local system [/system identity get name]
:local count 0
:local Cto
:local listVpn
:foreach Vpn in=[[:parse "[/interface $1 find]"]] do={
  :local TT "%F0%9F%94%B5"
  :local nameVpn [[:parse "[/interface $1 get $Vpn name]"]]
  :local commentVpn [[:parse "[/interface $1 get $Vpn comment]"]]
  :local typeVpn [:pick [/interface get $nameVpn type] ([:find [/interface get $nameVpn type] "-"]+1) [:len [/interface get $nameVpn type]]]
  :if ($typeVpn="out") do={:set Cto ("connect to "."$[[:parse "[/interface $1 get $nameVpn connect-to]"]]")} else={:set Cto ""}
  :local VpnState [[:parse "[/interface $1 monitor $Vpn once as-value]"]]
  :local cuVpnStatus ($VpnState->"status")
  :local ladr ($VpnState->"local-address")
  :local radr ($VpnState->"remote-address")
  :local uptime ($VpnState->"uptime")

    :if ($cuVpnStatus~"terminating") do={
    :set cuVpnStatus "disabled";  set TT ""
    }
    :if ([:typeof $cuVpnStatus]="nothing") do={
    :set cuVpnStatus "disconnected";  set TT "%F0%9F%94%B4"
    }
    :if ($cuVpnStatus="disabled") do={ :set TT "%F0%9F%94%B3"
    }
  :set count ($count+1)
 :if (($cuVpnStatus="disconnected") or ($cuVpnStatus="disabled")) do={
  :set listVpn ($listVpn."".$count. " ".$TT." ".$nameVpn." ".$commentVpn.": ".$cuVpnStatus."%0A")
} else={:set listVpn ("$listVpn"."$count"." $TT"." $nameVpn"." $commentVpn:"." $cuVpnStatus"." uptime: "."$uptime"."%0A"."          $Cto"." local-address: "."$ladr"." remote-address: "."$radr"."%0A")}
}
:if ([:len $listVpn]!=0) do={
[$FuncTelegramSender ("$Emoji "." $system"." $1:%0A"."$listVpn")]
 }
}
:return []}


# main block of the script
:global Emoji
:global FuncTelegramSender
[$FuncTelegramSender ("<b>"."$Emoji "." $system"." --- VPN Interface Informer --- : </b> %0A %0A") "html"]
:log info ""
:log warning ("$system"."VPN Interface Informer script is start up ... ")

[$FuncTonnel "l2tp-client"]
[$FuncTonnel "l2tp-server"]
[$FuncTonnel "pptp-client"]
[$FuncTonnel "pptp-server"]
[$FuncTonnel "ovpn-client"]
[$FuncTonnel "ovpn-server"]
[$FuncTonnel "ppp-client"]
[$FuncTonnel "ppp-server"]
[$FuncTonnel "sstp-client"]
[$FuncTonnel "sstp-server"]
[$FuncTonnel "pppoe-client"]
[$FuncTonnel "pppoe-server"]

:log warning "VPN Interface Informer scanning is done and Telegram chat send"
:return "done"
}}


# print vpnuser seckret & active vpn user`s - > Telegram
# версия 01.10.2021
# ------------------------------------------------------------
:set FuncVpnUser do={
:if ([:len $0]!=0) do={
:local name;
:local enc;
:local addr;
:local ltu;
:local pass;
:local type;
:local vpnuser
:local vpnuserT
:local vpnuserL
:local vpnuserTlg
:local calc
:global ADMINPHONE
:global Emoji


#:log info "";
#:log warning "Настроенные VPN-пользователи:"

:foreach i in=[/ppp secret find] do={
:set name [/ppp secret get $i name]; :set pass [/ppp secret get $name password]; set type [/ppp secret get $i service]
:set calc ($calc+1); 
# :log info ("$calc "."$name"." ["." $type"."]"." $pass");
:set vpnuser ("$vpnuser"."$calc"."  $name"."  <"." $type ".">"." $pass"."%0A");
}

# :log warning $calc; :log info "";
:do {
:global FuncTelegramSender; [$FuncTelegramSender ("$Emoji "."* $[/system identity get name]*"." VPN-users name, type and password set:"."%0A------------------------------------------------------------------------------------%0A"."$vpnuser") "markdown"]
} on-error={:log error "Error send to Telegram message"}

:set vpnuser;
:set calc

#:log info "";
#:log warning "Подключенные VPN-пользователи:"

:foreach i in=[/ppp active find] do={
:set $name [/ppp active get $i name]; :set $type [/ppp active get $i service]; :set $enc [/ppp active get $i encoding]; :set $addr [/ppp active get $i address]; :set $ltu [/ppp active get $i uptime]
# :log info ("$name"." ["."$type"."]"." $enc"." $addr");
:set $vpnuser ("$vpnuser"."$name"."\n");
:set vpnuserTlg ("$vpnuserTlg"."$name"."  {"."$type"."}"." $addr". " uptime: $ltu"."%0A");
}

:set calc [:len [/ppp active find]]

do {
:local SMSdevice [/tool sms get port];
/tool sms send $SMSdevice  phone=$ADMINPHONE message=("active VPN-users "."$calc".":"."\n"."$vpnuser");
} on-error={:log error "Error send SMS message"}

do {
:global FuncTelegramSender;
[$FuncTelegramSender ("$Emoji "."* $[/system identity get name]*"." VPN-active". " $calc"." users: "."%0A-----------------------------------------------------------------------%0A"."$vpnuserTlg") "markdown"]
} on-error={:log error "Error send to Telegram message"}
  :return $calc
 }
}

# print wifi Interfaces, SSID and Band to Telegram
# версия 06.03.2022
# ----------------------------------------------
:set FuncWifi do={
:if ([:len $0]!=0) do={
:global Emoji
:global FuncTelegramSender
:local system [/system identity get name]
:local WS
:local listWS
:local logWS
:local TT
:local count 0

:foreach wirelessClient in=[/interface wireless find true] do={
:local WsName [/interface get $wirelessClient name]
:local WsComment [/interface get $wirelessClient comment]
:local WsSID [/interface wireless get $wirelessClient ssid] 
:local WsBand [/interface wireless get $wirelessClient band] 
:local WsMode [/interface wireless get $wirelessClient mode] 
:local WsState (![/interface get $wirelessClient disabled])
:local WsProf  [/interface wireless get $wirelessClient security-profile]
:local Ws2Key [/interface wireless security-profiles get $WsProf wpa2-pre-shared-key];
:if ([:len $WsBand]=0) do={:set WsMode "virtual wifi"}
:if ($WsState) do={:set WS "enable"; :set TT "%F0%9F%94%B5"} else={:set WS "disable"; :set TT "%F0%9F%94%B4"}
# :local WD [/interface monitor $wirelessClient once as-value]
:set count ($count+1)
:set listWS ("$listWS"."$count"." $TT"." $WsName"." $WsComment"." [ $WsMode ]"." SSID:"." $WsSID"." $WsBand"."%0A")
:set logWS ("$logWS"."$count"." $WsSID "."$Ws2Key"."\n")
}

:if ([:len $listWS]!=0) do={
[$FuncTelegramSender ("$Emoji "." $system"." wifi interface and SSID:%0A"."$listWS")]
   }
 :return $logWS;
 }
}

# wifiaccess tabl to Telegram
# ------------------------------------------
:set FuncWifiAccess do={
:if ([:len $0]!=0) do={
:global Emoji
:global FuncTelegramSender
:local identity [/system identity get name]
:local count
:local output;
:foreach activeIndex in=[/interface wireless access find true] do={
      :set count ($count+1);
              :local RegVal [/interface wireless access get $activeIndex]
                :local iFace ($RegVal->"interface")
                :local MACAddr ($RegVal->"mac-address")
                :local comment ($RegVal->"comment")
                :local time ($RegVal->"time")
     :if ($RegVal->"disabled") do={
             :set output ("$output"."$count"." %F0%9F%94%B4 "." $comment"." $iFace"." $MACAddr"." $time"."%0A");
} else={ :set output ("$output"."$count"." %F0%9F%94%B7  "." $comment"." $iFace"." $MACAddr"." $time"."%0A");}

          }

if ([:len $output] >0) do={[$FuncTelegramSender ("$Emoji"." *Router"." $identity"." wireless access-tabl:*"."%0A"."-------------------------------------------------------------------------------------------------------------- "."%0A"."$output") "markdown"]
} else={[$FuncTelegramSender ("$Emoji"." *Router"." $identity"." wireless access-tabl is empty*") "markdown"]}
  :return $count;
 }
}

# wifi users registry tabl - > Telegram
# -----------------------------------------------------
:set FuncWifiReg do={
:if ([:len $0]!=0) do={
:global Emoji;
:global botID;
:global myChatID;
:global FuncTelegramSender
:local count
:local identity [/system identity get name];

:local output;
:foreach activeIndex in=[/interface wireless registration-table find] do={
            :if ([:typeof $activeIndex]!="nothing") do={
                         :local WifiFace [/interface wireless registration-table get value-name="interface" $activeIndex];
                         :local WifiComment [/interface wireless registration-table get value-name="comment" $activeIndex];
                         :local activeMACAddr [/interface wireless registration-table get value-name="mac-address" $activeIndex];
                         :local activeIPadr [/interface wireless registration-table get value-name="last-ip" $activeIndex];
                         :local WSignal [/interface wireless registration-table get value-name="signal-strength" $activeIndex];
                         :set count ($count+1)
                         :set output ("$output"."$count"."  $WifiFace"." $activeMACAddr "."$activeIPadr"." $WifiComment"."%0A"."      signal strength: "."$WSignal"."%0A");
                  }
          }

if ([:len $output] >0) do={[$FuncTelegramSender ("$Emoji"." <b>Router  $identity wireless registration-tabl:</b>"."%0A"." $output1") "html"]
} else={[$FuncTelegramSender ("$Emoji"." <b>Router  $identity wireless registration-tabl: is empty</b>") "html"]}
:return $count;
 }
}


# wifi SSID & pass - > Telegram and SMS $ADMINPHONE
# ---------------------------------------------------------------------------------
:set FuncWifiPass do={
:if ([:len $0]!=0) do={
:global Emoji
:global FuncTelegramSender
:global ADMINPHONE
:global FuncWifi
:local SMSmessage [$FuncWifi]
:log warning ("\n"."Router "."$[/system identity get name]"." wlan SSID and passwords:"."\n"."$SMSmessage")
do {
:local SMSdevice [/tool sms get port];
 /tool sms send $SMSdevice  phone=$ADMINPHONE message=("Router "."$[/system identity get name]"." wifi:"."\n"."$SMSmessage")
} on-error={:log error "Error send SMS message"}
   :return [];
 }
}

# function FuncScriptList ->Telegram
# ---------------------------------------------------
:set FuncScriptList do={
:if ([:len $0]!=0) do={
:global Emoji; :global FuncTelegramSender; :global fMirror
:local ScriptArray [:toarray ""]; :local CommentArray [:toarray ""]
:local nlist 900
:local name
:local comment
:local count 0

# seek all scripts
:foreach i in=[system script find] do={:set $name [/system script get $i name]; set comment [/system script get $i comment]
:set ($ScriptArray->$count) $name; :set ($CommentArray->$count) $comment;:set count ($count+1);}
:local a ""; :local b; :local c; :local d;
:local block 0
:for i from=0 to=([:len $ScriptArray]-1) do={:set $c ("$ScriptArray"->"$i"); :set $d ("$CommentArray"->"$i");:set b ($i+1)
:if ($fMirror) do={:set a ("$a"."$b "."/"."$c"." $d"."%0A")} else={:set a ("$a"."$b "."$c"." $d"."%0A")}
# один вывод ограничен количеством nlist символов;
:if ([:len $a]>$nlist) do={:set block ($block+1);
[$FuncTelegramSender ("$Emoji"."$[/system identity get name] repository script list < $block >:"."%0A%0A"."$a")]
:set a "";
  }
}
:set block ($block+1)
# "допечатка" последнего блока данных
[$FuncTelegramSender ("$Emoji"."$[/system identity get name] repository script list: < $block >"."%0A%0A"."$a")]
  :return [:len $ScriptArray]
 }
}


# function FuncFuncList ->Telegram
# ---------------------------------------------------
:set FuncFuncList do={
:if ([:len $0]!=0) do={
:global Emoji; :global FuncTelegramSender; :global fMirror;
:local ScriptArray [:toarray ""];
:local ValArray [:toarray ""];
:local nlist 900
:local name
:local val
:local comment
:local count 0

# seek all global
:foreach i in=[/system script environment find] do={:set $name [/system script environment get $i name]; 
:if (([/system script environment get $i value]="(code") or  ([:len [:find [/system script environment get $i value] "(eval"]]>0)) do={
:set ($ScriptArray->$count) $name;
:set count ($count+1);
}}
:local a ""; :local b 0; :local c;
:local block 0
:for i from=0 to=([:len $ScriptArray]-1) do={:set $c ("$ScriptArray"->"$i");
:if ([:len $c]!=0) do={
:if ($fMirror) do={:set b ($b+1); :set a ("$a"." - "."$b  "."/"."$c "."%0A")} else={
:set b ($b+1); :set a ("$a"." - "."$b  "."$c "."%0A")}
}
# один вывод ограничен количеством nlist символов;
:if ([:len $a]>$nlist) do={:set block ($block+1);
[$FuncTelegramSender ("$Emoji"."$[/system identity get name] repository environment active Functions list < $block >:"."%0A%0A"."$a")]
:set a "";
  }
}
:set block ($block+1)
# "допечатка" последнего блока данных
[$FuncTelegramSender ("$Emoji"."$[/system identity get name] repository environment active Functions list: < $block >"."%0A%0A"."$a")]
     :return $count;
 }
}

# function FuncSchedList ->Telegram
# ---------------------------------------------------

:set FuncSchedList do={
:if ([:len $0]!=0) do={
:global Emoji; :global FuncTelegramSender;
:local ScriptArray [:toarray ""]; :local CommentArray [:toarray ""]; :local StartTimeArray [:toarray ""]; :local IntervalArray [:toarray ""]; local StatusArray [:toarray ""];
:local nlist 900
:local count 0
# seek all scheduler
:foreach i in=[system scheduler find] do={
:set ($StatusArray->$count) [/system scheduler get $i disabled]
:set ($ScriptArray->$count) [/system scheduler get $i name]
:set ($CommentArray->$count) [/system scheduler get $i comment]
:set ($StartTimeArray->$count) [/system scheduler get $i "start-time"]
:set ($IntervalArray->$count) [/system scheduler get $i interval]
:set count ($count+1);}

:local a ""; :local e; :local b; :local c; :local d; :local t; local v
:local block 0
:for i from=0 to=([:len $ScriptArray]-1) do={:set $c ("$ScriptArray"->"$i"); :set $d ("$CommentArray"->"$i"); set $t ("$StartTimeArray"->"$i"); set $v ("$IntervalArray"->"$i"); 
:if ($StatusArray->"$i") do={:set e "%F0%9F%94%B4"} else={:set e "%F0%9F%94%B7"}
:set b ($i+1);
:set a ("$a"." $e"." $b"." $c"." $d"." [ $t ]"." [ $v ]"."%0A")
# один вывод ограничен количеством nlist символов;
:if ([:len $a]>$nlist) do={:set block ($block+1);
[$FuncTelegramSender ("$Emoji"."$[/system identity get name] scheduler list < $block >:"."%0A%0A"."$a")]
:set a "";
  }
}
:set block ($block+1)
# "допечатка" последнего блока данных
[$FuncTelegramSender ("$Emoji"."$[/system identity get name] scheduler list: < $block >"."%0A%0A"."$a")]
  :return [:len $ScriptArray]
 }
}


# function FuncGlobalVarList ->Telegram
# ---------------------------------------------------------
:set FuncGlobalVarList do={
:if ([:len $0]!=0) do={
:global Emoji; :global FuncTelegramSender;
:local ScriptArray [:toarray ""];
:local ValArray [:toarray ""];
:local nlist 900
:local name
:local val
:local comment
:local count 0
# seek all global
:foreach i in=[/system script environment find] do={:set $name [/system script environment get $i name]; 
:if (([/system script environment get $i value]!="(code") and  ([:len [:find [/system script environment get $i value] "(eval"]]!=1)) do={
:set $val [/system script environment get $i value];} else={:set val; set name}
:set ($ScriptArray->$count) $name; :set ($ValArray->$count) $val;
:set count ($count+1);
}
:local a ""; :local b 0; :local c; :local d;
:local block 0
:for i from=0 to=([:len $ScriptArray]-1) do={:set $c ("$ScriptArray"->"$i"); :set $d ("$ValArray"->"$i");
:if ([:len $c]!=0) do={:set b ($b+1)
:set a ("$a"." - "."$b  "."$c "."$d"."%0A")}
# один вывод ограничен количеством nlist символов;
:if ([:len $a]>$nlist) do={:set block ($block+1);
[$FuncTelegramSender ("$Emoji"."$[/system identity get name] repository environment Global var list < $block >:"."%0A%0A"."$a")]
:set a "";
  }
}
:set block ($block+1)
# "допечатка" последнего блока данных
[$FuncTelegramSender ("$Emoji"."$[/system identity get name] repository environment Global var list: < $block >"."%0A%0A"."$a")]
         :return $b;
 }
}


:log info "  -    SATELLITE1 module is set"


