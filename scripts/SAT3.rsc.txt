#-------------------------------------------------------------------------------------------------------------------------
# SATELLITE3 module  for TLGRM version 2.2 by Sertik (Serkov S.V.) 25/10/2022
#-------------------------------------------------------------------------------------------------------------------------


# declare functions:
:global FuncTelegramSender
:global FuncSchedFuncAdd
:global FuncSchedScriptAdd

# function FuncTelegramSender
# ---------------------------------------------
:global FuncTelegramSender
:if (!any $FuncTelegramSender) do={ :global FuncTelegramSender do={
:if ([:len $0]!=0) do={
:global Emoji
:global botID;
:global myChatID;
:local Tstyle
:if ([:len $0]!=0) do={
:if ([:len $2]=0) do={} else={:set $Tstyle $2} 
:if (($2="html") or ($2="markdown") or ($2="markdownV2") or ([:len $2]=0)) do={

:local string; :set $string $1;

#  table of the codes of Russian letters UTF8 + some characters are not supported by Telegram

:local rsimv [:toarray {"А"="D090"; "Б"="D091"; "В"="D092"; "Г"="D093"; "Д"="D094"; "Е"="D095"; "Ж"="D096"; "З"="D097"; "И"="D098"; "Й"="D099"; "К"="D09A"; "Л"="D09B"; "М"="D09C"; "Н"="D09D"; "О"="D09E"; "П"="D09F"; "Р"="D0A0"; "С"="D0A1"; "Т"="D0A2"; "У"="D0A3"; "Ф"="D0A4"; "Х"="D0A5"; "Ц"="D0A6"; "Ч"="D0A7"; "Ш"="D0A8"; "Щ"="D0A9"; "Ъ"="D0AA"; "Ы"="D0AB"; "Ь"="D0AC"; "Э"="D0AD"; "Ю"="D0AE"; "Я"="D0AF"; "а"="D0B0"; "б"="D0B1"; "в"="D0B2"; "г"="D0B3"; "д"="D0B4"; "е"="D0B5"; "ж"="D0B6"; "з"="D0B7"; "и"="D0B8"; "й"="D0B9"; "к"="D0BA"; "л"="D0BB"; "м"="D0BC"; "н"="D0BD"; "о"="D0BE"; "п"="D0BF"; "р"="D180"; "с"="D181"; "т"="D182"; "у"="D183"; "ф"="D184"; "х"="D185"; "ц"="D186"; "ч"="D187"; "ш"="D188"; "щ"="D189"; "ъ"="D18A"; "ы"="D18B"; "ь"="D18C"; "э"="D18D"; "ю"="D18E"; "я"="D18F"; "Ё"="D001"; "ё"="D191"; "№"="0023"; " "="0020"; "&"="0026"; "`"="0027"; "+"="002B";"["="005B"; "\\"="005C"; "]"="005D"; "_"="005F"; "'"="0060"}]

# encoding of the symbols and аssembly line
:local StrTele ""; :local code "";
:for i from=0 to=([:len $string]-1) do={:local keys [:pick $string $i (1+$i)]; :local key ($rsimv->$keys); if ([:len $key]!=0) do={:set $code ("%"."$[:pick ($rsimv->$keys) 0 2]"."%"."$[:pick ($rsimv->$keys) 2 4]");:if ([pick $code 0 3] ="%00") do={:set $code [:pick $code 3 6]}} else={:set $code $keys}; :set $StrTele ("$StrTele"."$code")}

do {
/tool fetch url="https://api.telegram.org/$botID/sendmessage\?chat_id=$myChatID&parse_mode=$Tstyle&text=$StrTele" keep-result=no; :return "Done"
} on-error={:log info; :log error "Error function $0 fetch"; :log info ""; :return "Error fetch"}
    } else={:log info; log error "Parametrs function $0 mismatch"; :log info ""; :return "Error parametrs mismatch"}
  }
}}}

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Функция  FuncSchedScriptAdd добавления задания на выполнение произвольного скрипта в Планировщик
#  by Sertik 26/02/2021 version 1.0
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# usage [$FuncSchedScriptAdd "script name"  "дата в формате Feb/06/2021" "время (00:00:00 or startup)" "интервал (00:00:00)"]
# examples:
# :local ScriptFunc [$FuncSchedScriptAdd "script name"  "Feb/06/2021" "21:06:30" "00:00:00"]
# если время срабатывания стоит startup, то date устанавливается текущим днём (так работает Планировщик)
# [$FuncSchedScriptAdd "script name"  "Feb/06/2021" "startup" "00:01:00"]
# [$FuncSchedScriptAdd "script name"]
#

:set FuncSchedScriptAdd do={
:if ([:len $0]!=0) do={
    :if ([:len $1]!=0) do={
         :if ([:len [/system script find name=$1]]!=0) do={
:if ([:len $4]=0) do={:set $4 "00:00:00"}
:local timedelay 10
:local time [/system clock get time]; :local date [/system clock get date];
:global FuncEpochTime; :global FuncUnixTimeToFormat;
:local tm [$FuncUnixTimeToFormat ([$FuncEpochTime]+$timedelay) 5]
:local sdate "";
:if ([:len $2]>0) do={:set sdate $2} else={:set sdate [:pick $tm 0 [:find $tm "-"]]}
:if ([:len $3]>0) do={} else={:set $3 [:pick $tm ([:find $tm "-"]+1) [:len $tm]]}
                   :local insertend;
        :do {
                        :if ($4!="00:00:00") do={:set insertend "";}  else={:set insertend ":global FuncSchedRemove; [\$FuncSchedRemove \"Run script $1-$2-$time\"]"}
                   :local strscr (":do {"."/system script run "."$1;"."$insertend"."} on-error={:log info \"\"; :log error \"ERROR when executing a scheduled run script $1\"; :log info \"\" }");
                    [/system scheduler add name=("Run script "."$1"."-"."$2"."-"."$time") start-time=[:totime $3] on-event=$strscr interval=[:totime $4] start-date=$sdate comment=("added by function "."$[:pick $0 1 [:len $0]]")];
        } on-error={:log error "ERROR function $0 Sheduller is not set"; :return "ERROR function $0 Sheduller is not set"};
:log info ""; :put "";
:log warning ("Function $0 added task run script $1-$2-$time to the scheduler")
:put ("Function $0 added task run script $1-$2-$time to the scheduler")
:log info ""; :put "";
    :return "OK";
      } else={:return "ERROR function $0 script $1 not find in repository"}
   } else={:return "ERROR parametr $1 <ScriptName>"}
 }
}


#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Функция  FuncSchedFuncAdd добавления задания на выполнение произвольной функции с простыми параметрами в Планировщик
#  by Sertik 26/02/2021 version 1.0
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#usage [$FuncSchedFuncAdd "полная строка функции c параметрами или без"  "дата в формате Feb/06/2021" "время (00:00:00 or startup)" "интервал (00:00:00)"]
# examples:
# :local ScriptFunc [$FuncSchedFuncAdd "FuncName par1 par2"  "Feb/06/2021" "21:06:30" "00:00:00"]
# если время срабатывания стоит startup, то date устанавливается текущим днём (так работает Планировщик)
# [$FuncSchedFuncAdd "FuncName"  "Feb/06/2021" "startup" "00:01:00"]
# [$FuncSchedFuncAdd "FuncName par1 par 2 par 3"]
#

:set FuncSchedFuncAdd do={
:if ([:len $0]!=0) do={
:if ([:len $1]!=0) do={
:if ([:len $4]=0) do={:set $4 "00:00:00"}
:local timedelay 10
:local time [/system clock get time]; :local date [/system clock get date];
:global FuncEpochTime; :global FuncUnixTimeToFormat;
:local tm [$FuncUnixTimeToFormat ([$FuncEpochTime]+$timedelay) 5]
:local sdate "";
:if ([:len $2]>0) do={:set sdate $2} else={:set sdate [:pick $tm 0 [:find $tm "-"]]}
:if ([:len $3]>0) do={} else={:set $3 [:pick $tm ([:find $tm "-"]+1) [:len $tm]]}
                      :local insert;
            :do {
                      :local FuncName;
                          :if ([:typeof [:find $1 " "]]!="nil") do={:set FuncName [:pick $1 0 [:find $1 " "]]} else={:set FuncName [:pick $1 0 [:len $1]]}
                           :local strfunc (":global "."$FuncName".";".":do {[\$$1];} on-error={:log info \"\"; :log error \"ERROR when executing a scheduled function $FuncName task\"; :log info \"\" }");
                           :if ($4!="00:00:00") do={:set insert ""} else={:set insert "; :global FuncSchedRemove; :do {[\$FuncSchedRemove \"Run function $1-$2-$time\"]} on-error={}"}
                           [/system scheduler add name=("Run function "."$1"."-"."$2"."-"."$time") start-time=[:totime $3] on-event=("$strfunc"."$insert") interval=[:totime $4] start-date=$sdate comment=("added by function "."$[:pick $0 1 [:len $0]]")]
                } on-error={:log error "ERROR function $0 Sheduller is not set"; :return "ERROR function $0 Sheduller is not set"}
:log info ""; :put "";
:log warning ("Function $0 added task run function $1-$2-$time to the scheduler");
:put ("Function $0 added task run function $1-$2-$time to the scheduler");
:log info ""; :put "";
:return "OK";
       } else={:return "ERROR parametr $1 <$FuncName>"}
  }
}


# Функция FuncSchedRemove - удаления задания из Планировщика
# usage [$FuncSchedRemove "task1"]

:global FuncSchedRemove
if (!any $FuncSchedRemove) do={:global FuncSchedRemove do={
:if ([:len $0]!=0) do={
:do {
/system scheduler remove "$1"} on-error={}
 }
}
}

# Функция FuncEpochTime - вычисления абсолютного времени UNIXTIME

# ограничена 2000-2199 годами
# без параметров - возвращает timeStamp (UnixTime)
# c параметрами $1 - нужно учитывать gmt или нет
# возвращает UnixTime этой временной точки
# если $2 не задан - берется текущая дата из /system clock
# если $3 не задан - берется текущее время аналогично

:global FuncEpochTime
if (!any $FuncEpochTime) do={:global FuncEpochTime do={
:local gmtofset 0
:local ds
:local ts
 :if ([:len $1]=0) do={:set gmtofset [/system clock get gmt-offset]} else={:set gmtofset 0}
 :if ($1="gmtoffset") do={:set gmtofset [/system clock get gmt-offset]} else={:set gmtofset 0}
 :if ($1="nogmt") do={:set gmtofset 0}
 :if ([:len $2]=0) do={:set ds [/system clock get date]} else={:set ds $2}
 :if ([:len $3]=0) do={:set ts [/system clock get time]} else={:set ts $3}

#   :local ds [/system clock get date];
   :local months;
   :if ((([:pick $ds 9 11]-1)/4) != (([:pick $ds 9 11])/4)) do={
      :set months {"an"=0;"eb"=31;"ar"=60;"pr"=91;"ay"=121;"un"=152;"ul"=182;"ug"=213;"ep"=244;"ct"=274;"ov"=305;"ec"=335};
   } else={
      :set months {"an"=0;"eb"=31;"ar"=59;"pr"=90;"ay"=120;"un"=151;"ul"=181;"ug"=212;"ep"=243;"ct"=273;"ov"=304;"ec"=334};
   }
:local year [:tonum [:pick $ds 7 9]]
   :set ds (([:pick $ds 9 11]*365)+(([:pick $ds 9 11]-1)/4)+($months->[:pick $ds 1 3])+[:pick $ds 4 6]);
#   :local ts [/system clock get time];
   :set ts (([:pick $ts 0 2]*60*60)+([:pick $ts 3 5]*60)+[:pick $ts 6 8]);
#   :return ($ds*24*60*60 + $ts + 946684800 - $gmtofset);
:if ($year=20) do={
   :return ($ds*24*60*60 + $ts + 946684800 - $gmtofset);}
:if ($year=21) do={
   :return (($ds-1)*24*60*60 + $ts + 4102444800 - $gmtofset);
} else={:return 0}
 }
}

# Функция FuncUnixTimeToFormat - конвертер UNIXTIME в нормальное время

# год не ограничен столетием
# usial [$FuncUnixTimeToFormat "timeStamp", "type"]

# example:
#:global FuncEpochTime 
#:local nowtime [$FuncEpochTime "nogmt" "Oct/26/2021"]
#:log warning [$FuncUnixTimeToFormat $nowtime]

# type:

# "unspecified" - month/dd/yyyy <only> ((Mikrotik sheduller format)
# 1 - yyyy/mm/dd hh:mm:ss
# 2 - dd:mm:yyyy hh:mm:ss
# 3 - dd month yyy hh mm ss
# 4 - yyyy month dd hh mm ss
#5 - month/dd/yyyy-hh:mm:ss (Mikrotik sheduller format)

:global FuncUnixTimeToFormat;
if (!any $FuncUnixTimeToFormat ) do={:global FuncUnixTimeToFormat  do={

:local decodedLine ""
:local timeStamp $1

:local timeS ($timeStamp % 86400)
:local timeH ($timeS / 3600)
:local timeM ($timeS % 3600 / 60)
:set $timeS ($timeS - $timeH * 3600 - $timeM * 60)
:local dateD ($timeStamp / 86400)
:local dateM 2
:local dateY 1970
:local leap false
:while (($dateD / 365) > 0) do={
:set $dateD ($dateD - 365)
:set $dateY ($dateY + 1)
:set $dateM ($dateM + 1) 
:if ($dateM = 4) do={:set $dateM 0
:if (($dateY % 400 = 0) or ($dateY % 100 != 0)) do={:set $leap true
:set $dateD ($dateD - 1)}} else={:set $leap false}}
:local months [:toarray (0,31,28,31,30,31,30,31,31,30,31,30,31)]
:if (leap) do={:set $dateD ($dateD + 1); :set ($months->2) 29}
do {
:for i from=1 to=12 do={:if (($months->$i) >= $dateD) do={:set $dateM $i; :set $dateD ($dateD + 1); break;} else={:set $dateD ($dateD - ($months->$i))}}
} on-error={}
:local tmod
:if ([:len $2]!=0) do={:set $tmod $2} else={:set $tmod (:nothing)}
:local s "/"
:local nf true
:local mstr {"jan";"feb";"mar";"apr";"may";"jun";"jul";"aug";"sep";"oct";"nov";"dec"}
:local strY [:tostr $dateY]
:local strMn
:local strD
:local strH
:local strM
:local strS
:if ($nf) do={
:if ($dateM > 9) do={:set $strMn [:tostr $dateM]} else={:set $strMn ("0".[:tostr $dateM])}
:if ($dateD > 9) do={:set $strD [:tostr $dateD]} else={:set $strD ("0".[:tostr $dateD])}
:if ($timeH > 9) do={:set $strH [:tostr $timeH]} else={:set $strH ("0".[:tostr $timeH])}
:if ($timeM > 9) do={:set $strM [:tostr $timeM]} else={:set $strM ("0".[:tostr $timeM])}
:if ($timeS > 9) do={:set $strS [:tostr $timeS]} else={:set $strS ("0".[:tostr $timeS])}
} else={
:set strMn [:tostr $dateM]
:set strD [:tostr $dateD]
:set strH [:tostr $timeH]
:set strM [:tostr $timeM]
:set strS [:tostr $timeS]
}
do {
:if ([:len $tmod]=0) do={:local mt ($mstr->($dateM - 1)); :set $decodedLine ("$mt/"."$strD/"."$strY"); break;}
:if ($tmod = 1) do={:set $decodedLine "$strY$s$strMn$s$strD $strH:$strM:$strS"; break;}
:if ($tmod = 2) do={:set $decodedLine "$strD$s$strMn$s$strY $strH:$strM:$strS"; break;}
:if ($tmod = 3) do={:set $decodedLine ("$strD ".($mstr->($dateM - 1))." $strY $strH:$strM:$strS"); break;}
:if ($tmod = 4) do={:set $decodedLine ("$strY ".($mstr->($dateM - 1))." $strD $strH:$strM:$strS"); break;}
:if ($tmod = 5) do={:local m ($mstr->($dateM - 1)); :set $decodedLine ("$m/"."$strD/"."$strY"."-$strH:$strM:$strS"); break;}

} on-error={}
:return $decodedLine;
}
}

:log info "  -    SATELLITE3 module is set"

