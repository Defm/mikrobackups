
:local sysname [/system identity get name];
:local scriptname "doPushStatsToInfluxDB";
:global globalScriptBeforeRun;
$globalScriptBeforeRun $scriptname;

#a part of queue comment to locate queues to be processed
:local queueCommentMark "dtq";

#influxDB service URL (beware about port when /fetch)
:local tURL "http://nas.home/api/v2/write\?bucket=httpapi&org=home"
:local tPingURL "http://nas.home/ping"
:global globalNoteMe;
:local itsOk true;


:local useBandwidthTest false;

:local state "";

:do {

  :set state ("Checking if INFLUXDB Service online");
  $globalNoteMe value=$state;

  :local result [/tool fetch http-method=get port=8086 user="mikrotik" password="mikrotik" mode=http url="$tPingURL"  as-value output=user];
 
} on-error={
  
  :set state ("INFLUXDB: Service Failed!");
  $globalNoteMe value=$state;

  :local inf "Error When $scriptname on $sysname: $state"  

  :global globalTgMessage;
  $globalTgMessage value=$inf;

  :error $inf;
}

:local state "";

:local authHeader ("Authorization: Token nh-mJylW1FCluBlUGXYZq_s5zne_QjzkHcc56y8v6AIlUOOiOm4bU2652r2Vkv3Vp6WzgQT7WPsi4yF0RvdElg=="); 


:if ( $useBandwidthTest  ) do={

:local txAvg 0
:local rxAvg 0

:local btServer 192.168.97.1;

:set state ("Starting VPN bandwidth test");
$globalNoteMe value=$state;

tool bandwidth-test protocol=tcp direction=transmit user=btest password=btest address=$btServer duration=15s do={
:set txAvg ($"tx-total-average" / 1048576 );
}

tool bandwidth-test protocol=tcp direction=receive user=btest password=btest address=$btServer duration=15s do={
:set rxAvg ($"rx-total-average" / 1048576 );
}

:global globalCallFetch;
:local fetchCmd  "/tool fetch http-method=post port=8086 mode=http url=\"$tURL\" http-header-field=\"$authHeader, content-type: text/plain\" http-data=\"bandwidth,host=$sysname,target=CHR transmit=$txAvg,recieve=$rxAvg\" keep-result=no";

$globalCallFetch $fetchCmd;

}
 
/queue simple

:foreach z in=[find where comment~"$queueCommentMark"] do={

  :local skip false;

  :local queuecomment [get $z comment]
  :local ip [get $z target]

  :if ( $itsOk ) do={

    :if ( ($ip->0) != nil ) do={
      :set state ("Locating queue target IP for queue $queuecomment");
      $globalNoteMe value=$state;
      :set ip ($ip->0) 
      :set ip ( [:pick $ip 0 [:find $ip "/" -1]] ) ;
      $globalNoteMe value="Done";
    } else {
      :set state "Cant locate queue target IP for queue $queuecomment. Skip it."
      $globalNoteMe value=$state;
      :set skip true;
    }

  }

  :local hostName ""
  :local upload 0
  :local download 0

  :if ( $itsOk and !$skip) do={
    :local bytes [get $z bytes]
    :set upload ($upload + [:pick $bytes 0 [:find $bytes "/"]])
    :set download ($download + [:pick $bytes ([:find $bytes "/"]+1) [:len $bytes]])
  }

  :if ( $itsOk and !$skip) do={
    :do {
      #dhcp server for IP->name translation
      :set state ("Picking host name for $ip via DHCP");
      $globalNoteMe value=$state;
      :set hostName [/ip dhcp-server lease get [find (address=$ip)] host-name]

      :local typeOfValue [:typeof $hostName]

      :if (($typeOfValue = "nothing") or ($typeOfValue = "nil")) do={
        :set state "Got empty host name. Skip it."
        $globalNoteMe value=$state;
        :set skip true;
      } else={
        :set state "Got it $hostName"
        $globalNoteMe value=$state;
      }

    } on-error= {
      :set state "Error When $state"
      $globalNoteMe value=$state;
      :set skip true;
    }
  }

  :if ( $itsOk and !$skip) do={
    :do {
      :set state ("Pushing stats to influxDB about $hostName: UP = $upload, DOWN=$download");
     $globalNoteMe value=$state;
      /tool fetch http-method=post port=8086 mode=http url="$tURL" http-header-field="$authHeader, content-type: text/plain" http-data="traffic,host=$sysname,target=$hostName upload=$upload,download=$download" keep-result=no;
      $globalNoteMe value="Done";
    } on-error= {
      :set state "Error When $state"
      $globalNoteMe value=$state;
      :set itsOk false;
    }
  }
  
  :if ($itsOk and !$skip) do={
    :set state "Flushing stats.."
    $globalNoteMe value=$state;
    reset-counters $z
  }  
}

:local inf ""
:if ($itsOk) do={
  :set inf "$scriptname on $sysname: stats pushed Succesfully"
}

:if (!$itsOk) do={
  :set inf "Error When $scriptname on $sysname: $state"  
}

$globalNoteMe value=$inf

:if (!$itsOk) do={
  :set inf "$scriptname on $sysname: $state"  
  
  :global globalTgMessage;
  $globalTgMessage value=$inf;

}

