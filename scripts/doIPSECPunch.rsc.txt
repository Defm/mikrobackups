:local sysname [/system identity get name];
:local scriptname "doIPSECPunch";
:global globalScriptBeforeRun;
$globalScriptBeforeRun $scriptname;

:global globalNoteMe;
:local itsOk true;

:local state "";
:local punched "";


/ip ipsec policy {
  :foreach vpnEndpoint in=[find (!disabled and !template)] do={

    :local ph2state [get value-name=ph2-state $vpnEndpoint]
    :local isTunnel [get value-name=tunnel $vpnEndpoint]
    :local peerPoint [get $vpnEndpoint peer]
    :local dstIp;

    :if ($isTunnel) do={
      :set dstIp [get value-name=sa-dst-address $vpnEndpoint]
    } else {
      :set dstIp [get value-name=dst-address $vpnEndpoint]
    }

    :if (($itsOk) and ($ph2state != "established")) do={

      :set state "Non-established IPSEC policy found for destination IP $dstIp. Checking active peers.."
      $globalNoteMe value=$state;

      :local actPeerProcessed 0;

      /ip ipsec active-peers {
        :foreach actPeer in=[find remote-address=$dstIp] do={

          :local peerId [get $actPeer id];
          :local peer "";

          :if ([:typeof $peerId] != "nil") do={
            :set peer "$peerId"
          } else {
            :set peer "$dstIp"
          }

          :do {

            :set state "Active peer $peer found Non-established IPSEC policy. Kill it.."
            $globalNoteMe value=$state;

            [remove $actPeer];

            :set state ("IPSEC tunnel got a punch after down for $dstIp ");
            $globalNoteMe value=$state;

            #waiting for tunnel to come up, because Telegram notes goes through tunnel
            :delay 10;

            :set punched ($punched . "$peer");
          
          } on-error= {

            :set state "Error When $state"
            $globalNoteMe value=$state;

            :set itsOk false;
            
          }

          :set actPeerProcessed ($actPeerProcessed + 1);
        }

      }

      #there were no active peers with such remote-address
      #This is the most common case if the policy is non-established

      :if ($actPeerProcessed = 0) do={

        #should not flush InstalledSA, because ot flushes the whole policies
        #just make disable-enable cycle
        
        :set state ("There were no active peers with $dstIp destination IP, but policy is non-established.");
        $globalNoteMe value=$state;

        :set state ("Making disable-enable cycle for policy to clear InstalledSA");
        $globalNoteMe value=$state;

        :delay 2;

        [set disabled=yes];
        
        #waiting for tunnel to come up, because Telegram notes goes through tunnel
        :delay 5;

        [set disabled=no];

       :delay 2;

        :local peerId ($peerPoint -> "id");
        :local peer "";

        :if ([:typeof $peerId] != "nil") do={
          :set peer "$peerId"
        } else {
          :set peer "$dstIp"
        }

        :set punched ($punched . "$peer");

      }      

    }
  }
}

:local inf ""

:if (($itsOk) and ($punched = "")) do={
  :set inf "$scriptname on $sysname: IPSEC tunnels are fine"
}

:if (($itsOk) and ($punched != "")) do={
  :set inf "$scriptname on $sysname: IPSEC tunnels refreshed for $punched"

  :global globalTgMessage;
  $globalTgMessage value=$inf;
}

:if (!$itsOk) do={
  :set inf "$scriptname on $sysname: $state"  
  
  :global globalTgMessage;
  $globalTgMessage value=$inf;

}

$globalNoteMe value=$inf

