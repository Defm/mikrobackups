
:global globalNoteMe;

:if (!any $globalNoteMe) do={ 
  :global globalNoteMe do={

  ## outputs $value using both :put and :log info
  ## example $outputInfo value="12345"
  :put "info: $value"
  :log info "$value"

  }
}

:global globalScriptBeforeRun;

:if (!any $globalScriptBeforeRun) do={ 
  :global globalScriptBeforeRun do={

    :global globalNoteMe;
    
    :if ([:len $1] > 0) do={

      :local currentTime ([/system clock get date] . " " . [/system clock get time]);
      :local scriptname "$1";

      :local count [:len [/system script job find script=$scriptname]];

      :if ($count > 0) do={

        :foreach counter in=[/system script job find script=$scriptname] do={

         #But ignoring scripts started right NOW
         :local thisScriptCallTime  [/system script job get $counter started];
         :if ($currentTime != $thisScriptCallTime) do={
           :local state "$scriptname already Running at $thisScriptCallTime - killing old script before continuing";
            $globalNoteMe value=$state;
            /system script job remove $counter;
          }
        }
      }

      :local state "Starting script: $scriptname";
      $globalNoteMe value=$state;

    }
  }
}

:global globalTgMessage;

:if (!any $globalTgMessage) do={ 
  :global globalTgMessage do={

    :global globalNoteMe;

    :local tToken "798290125:AAE3gfeLKdtai3RPtnHRLbE8quNgAh7iC8M";
    :local tGroupID "-343674739";
    :local tURL "https://api.telegram.org/bot$tToken/sendMessage\?chat_id=$tGroupID";

    :local state ("Sending telegram message... $value");
    $globalNoteMe value=$state;

    :do {
      /tool fetch http-method=post mode=https url="$tURL" http-data="text=$value" keep-result=no;
    } on-error= {
      :local state ("Telegram notify error");
      $globalNoteMe value=$state;
    };

  }
}

:global globalIPSECPolicyUpdateViaSSH;

:if (!any $globalIPSECPolicyUpdateViaSSH) do={ 
  :global globalIPSECPolicyUpdateViaSSH do={

    :global globalRemoteIp;
    :global globalNoteMe;

    :if ([:len $1] > 0) do={
      :global globalRemoteIp ("$1" . "/32"); 
    }

    :if (!any $globalRemoteIp) do={ 
      :global globalRemoteIp "0.0.0.0/32" 
    } else={
    
    }
    
    :local state ("RPC... $value");
    $globalNoteMe value=$state;

    :local count [:len [/system script find name="doUpdatePoliciesRemotely"]];

    :if ($count > 0) do={
  
       :local state ("Starting policies process... $globalRemoteIp ");
       $globalNoteMe value=$state;  
       
       /system script run doUpdatePoliciesRemotely;
    
     }
  }
}


#Example call
#$globalNewNetworkMember ip=192.168.99.130 mac=50:DE:06:25:C2:FC gip=192.168.98.229 comm=iPadAlxPro ssid="WiFi 5"  
:global globalNewNetworkMember;

:if (!any $globalNewNetworkMember) do={ 
  :global globalNewNetworkMember do={
    
    :global globalNoteMe;

    #to prevent connection
    :local guestDHCP "guest dhcp";
    #to allow connection
    :local mainDHCP "main dhcp";

    #when DHCP not using (add arp for leases)
    :local arpInterface "main infrastructure";

    :local state ("Adding new network member... ");
    $globalNoteMe value=$state;

    # incoming named params 
    :local newIp [ :tostr $ip ];
    :local newBlockedIp [ :tostr $gip ];
    :local newMac [ :tostr $mac ];
    :local comment [ :tostr $comm ];
    :local ssid [ :tostr $ssid ];    

    :if ([:len $newIp] > 0) do={

        :if ([ :typeof [ :toip $newIp ] ] != "ip" ) do={

            :local state ("Error: bad IP parameter passed - ($newIp)");
            $globalNoteMe value=$state;
            :return false;
        }

    } else={

        :local state ("Error: bad IP parameter passed - ($newIp)");
        $globalNoteMe value=$state;
        :return false;
    }

    :do {

        /ip dhcp-server lease remove [find address=$newIp];
        /ip dhcp-server lease remove [find mac-address=$newMac];

        :local state ("Adding DHCP configuration for ($newIp/$newMac) on $mainDHCP");
        $globalNoteMe value=$state;

        /ip dhcp-server lease add address=$newIp mac-address=$newMac server=$mainDHCP comment=$comment;

    } on-error={
        :local state ("Error: something fail on DHCP configuration 'allow' step for ($newIp/$newMac) on $mainDHCP");
        $globalNoteMe value=$state;
        :return false;
    }

    :do {

        /ip dhcp-server lease remove [find address=$newBlockedIp];

        :local state ("Adding DHCP configuration for ($newBlockedIp/$newMac) on $guestDHCP (preventing connections to guest network)");
        $globalNoteMe value=$state;

        /ip dhcp-server lease add address=$newBlockedIp block-access=yes mac-address=$newMac server=$guestDHCP comment=($comment . "(blocked)");

    } on-error={
        :local state ("Error: something fail on DHCP configuration 'block' step for ($newBlockedIp/$newMac) on $guestDHCP");
        $globalNoteMe value=$state;
        :return false;
    }

    :do {
       
        /ip arp remove [find address=$newIp];
        /ip arp remove [find address=$newBlockedIp];
        /ip arp remove [find mac-address=$newMac];

        /ip arp add address=$newIp interface=$arpInterface mac-address=$newMac comment=$comment
    } on-error={
        :local state ("Error: something fail on ARP configuration step");
        $globalNoteMe value=$state;
        :return false;
    }

    :do {
       
        /caps-man access-list remove [find mac-address=$newMac];

        /caps-man access-list add action=accept allow-signal-out-of-range=10s client-to-client-forwarding=yes comment=$comment disabled=no mac-address=$newMac ssid-regexp=$ssid place-before=1
    
    } on-error={
        :local state ("Error: something fail on CAPS configuration step");
        $globalNoteMe value=$state;
        :return false;
    }

    :return true;
    }
}
